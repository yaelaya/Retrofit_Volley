type Query {
    # Fetch all clients
    allClients: [Client!]!

    # Fetch a client by ID
    clientById(id: ID!): Client!

    # Fetch all rooms (chambres)
    allChambres: [Chambre!]!

    # Fetch a room by ID
    chambreById(id: ID!): Chambre!

    # Fetch all reservations
    allReservations: [Reservation!]!

    # Fetch a reservation by ID
    reservationById(id: ID!): Reservation!
}

type Mutation {
    # Add or update a client
    saveClient(client: ClientInput!): Client!

    # Delete a client by ID
    deleteClient(id: ID!): String!

    # Update an existing client
    updateClient(id: ID!, updatedClient: ClientInput!): Client!

    # Add or update a room
    saveChambre(chambre: ChambreInput!): Chambre!

    # Delete a room by ID
    deleteChambre(id: ID!): String!

    # Update an existing room
    updateChambre(id: ID!, updatedChambre: ChambreInput!): Chambre!

    # Add or update a reservation
    saveReservation(reservation: ReservationInput!): Reservation!

    # Delete a reservation by ID
    deleteReservation(id: ID!): String!

    # Update an existing reservation
    updateReservation(id: ID!, updatedReservation: ReservationInput!): Reservation!
}

enum DispoChambre {
    DISPONIBLE
    NON_DISPONIBLE
}

enum TypeChambre {
    SIMPLE
    DOUBLE
    SUITE
}

type Client {
    id: ID!
    nom: String!
    prenom: String!
    email: String!
    telephone: String!
}

input ClientInput {
    nom: String!
    prenom: String!
    email: String!
    telephone: String!
}

type Chambre {
    id: ID!
    typeChambre: TypeChambre!
    prix: Float!
    dispoChambre: DispoChambre!
}

input ChambreInput {
    typeChambre: TypeChambre!
    prix: Float!
    dispoChambre: DispoChambre!
}

type Reservation {
    id: ID!
    client: Client!
    chambre: Chambre!
    dateDebut: String!
    dateFin: String!
    preferences: String
}

input ReservationInput {
    clientId: ID!
    chambreId: ID!
    dateDebut: String!
    dateFin: String!
    preferences: String
}